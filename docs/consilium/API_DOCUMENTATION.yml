# API Documentation
# Human-readable reference derived from the canonical OpenAPI (consilium-openapi-v1.1.yaml)
# Keep this document aligned with the spec; do not hand-edit endpoints without updating the OpenAPI.

base_configuration:
  base_url: "https://{host}"
  examples:
    local: "https://relay.consilium.local"
    deployed: "https://example.com"
  authentication:
    type: "API Key"
    header: "X-Consilium-Api-Key"
    required: true
  idempotency:
    header: "X-Idempotency-Key"
    required: false
  content_type: "application/json"

endpoints:
  system_health:
    path: "/v1/system/health"
    method: "GET"
    description: "Liveness/Readiness probe for deployments & containers"
    authentication_required: false
    responses:
      200:
        schema_ref: "HealthResponse"
        notes: "Includes optional checks map (e.g., discord gateway: connected)"

  system_info:
    path: "/v1/system/info"
    method: "GET"
    description: "Service metadata (version, git_sha, build_time)"
    authentication_required: false
    responses:
      200:
        schema_ref: "InfoResponse"

  start_thread:
    path: "/v1/strategy/start-thread"
    method: "POST"
    description: "Create a new Discord thread; optional seed message as first post"
    authentication_required: true
    request_schema_ref: "StartThreadRequest"
    responses:
      201:
        schema_ref: "StartThreadResponse"
      400: "BadRequest"
      401: "Unauthorized"
      429: "Rate limited (Retry-After header)"

  post_message:
    path: "/v1/strategy/post"
    method: "POST"
    description: "Post an attributed message to a thread; server handles splitting/queueing"
    authentication_required: true
    headers:
      - "X-Idempotency-Key (optional)"
    request_schema_ref: "PostMessageRequest"
    responses:
      201:
        schema_ref: "PostMessageResponse"
        headers:
          - "X-RateLimit-Remaining"
      202:
        schema_ref: "PostMessageResponse"
        headers:
          - "Retry-After"
      400: "BadRequest"
      401: "Unauthorized"
      404: "NotFound"
      429: "Rate limited (Retry-After header)"

  fetch_messages:
    path: "/v1/strategy/fetch"
    method: "GET"
    description: "Retrieve normalized, attributed messages; use after_ts for incremental polling"
    authentication_required: true
    query_parameters:
      thread_id: "string (required)"
      after_ts: "string (optional, ISO 8601)"
      limit: "integer (1..200, default 50)"
    responses:
      200:
        schema_ref: "FetchMessagesResponse"
      400: "BadRequest"
      401: "Unauthorized"
      404: "NotFound"

schemas (canonical):
  - "HealthResponse"
  - "InfoResponse"
  - "StartThreadRequest"
  - "StartThreadResponse"
  - "PostMessageRequest"
  - "PostMessageResponse"
  - "FetchMessagesResponse"
  - "Message"
  - "Author"
  - "Error"

usage_patterns:
  authentication:
    - "Send API key in 'X-Consilium-Api-Key' for all Strategy endpoints"
  ai_agent_workflow:
    - "Create a decision thread with POST /v1/strategy/start-thread"
    - "Post structured analysis with POST /v1/strategy/post (include author.agent/model/run_id)"
    - "Poll GET /v1/strategy/fetch using after_ts for incremental fetch"
  idempotent_retries:
    - "Provide X-Idempotency-Key on client retries of POST /v1/strategy/post"
  error_handling:
    - "Parse 'error' & 'message' from Error schema"
    - "Respect 429 Retry-After header and backoff"
  rate_limiting:
    - "Server may return 202 for queued sends and 201 for immediate sends"
    - "X-RateLimit-Remaining header indicates remaining quota (relay-internal)"

conformance:
  source_of_truth: "consilium-openapi-v1.1.yaml"
  validation:
    commands: |
      # Validate OpenAPI and confirm required paths exist
      openapi-spec-validator consilium-openapi-v1.1.yaml
      python - <<'PY'
      import sys, pathlib, re
      spec = pathlib.Path('consilium-openapi-v1.1.yaml').read_text(encoding='utf-8')
      need = ['/v1/system/health','/v1/system/info','/v1/strategy/start-thread','/v1/strategy/post','/v1/strategy/fetch','X-Consilium-Api-Key']
      missing = [n for n in need if n not in spec]
      sys.exit(1 if missing else 0)
      PY
    expected: "Spec validates; presence checks pass."
  update_instructions: "Update this doc when the OpenAPI schema changes."
  review_frequency: "Review and update at the end of each phase or when major changes occur"
  deprecation_policy: "Remove deprecated endpoints in major releases"
  