---
doc_type: COPILOT_INSTRUCTIONS
template_version: 1.1.0
doc_title: "Phase 0 — GitHub Copilot Instructions"
status: DRAFT
created_utc: "2025-10-08T10:45:00Z"
last_updated_utc: "2025-10-08T10:45:00Z"

authority_order:
  - "00_AI_AGENT_RULES.yml"
  - "BLUEPRINT"
  - "ARCHITECTURE"
  - "IMPLEMENTATION"
update_protocol: "tense_management"
audience: [copilot, ai_agents, human_developers]

# ==========================
# CODE GENERATION PATTERNS
# ==========================
code_generation:
  patterns:
    fastapi_routes:
      - "Use Depends(...) for config/logging clients; keep handlers async."
      - "Validate with Pydantic v2 models exactly matching the OpenAPI schema."
      - "Return structured Error bodies (error, message, details)."
      - "Honor headers: X-Consilium-Api-Key, X-Idempotency-Key (when applicable)."
      - "Add request correlation (X-Request-ID via middleware)."
    discord_integration:
      - "Use discord.py async client; never block the event loop."
      - "Split messages at 2000 chars; preserve markdown and code fences."
      - "Queue sends under rate pressure; return 202 + Retry-After."
      - "Attach attribution via embed footer (agent/model/run_id)."
    pydantic_models:
      - "Fields, enums, and formats must mirror the OpenAPI components."
      - "Add validators for semantic constraints (lengths, patterns)."
      - "Keep model docstrings concise; prefer schema examples."
  templates:
    route_handler: |
      @router.post("/v1/example")
      async def handler(
          request: RequestModel,
          ok: bool = Depends(verify_api_key),
      ) -> ResponseModel:
          """
          Example handler.
          """
          try:
              # business logic
              return ResponseModel(...)
          except DomainError as e:
              raise HTTPException(status_code=400, detail={"error":"bad_request","message":str(e)})
    pydantic_model: |
      class Example(BaseModel):
          """Example model."""
          name: str = Field(..., min_length=1, max_length=100)

# =====================
# STYLE & QUALITY BARS
# =====================
style_preferences:
  line_length: 80
  string_quotes: "double"
  trailing_commas: true
  type_hints: "always_explicit"
  docstrings: "google_style"

quality_gates:
  lint: "ruff ."
  types: "mypy ."
  tests: "pytest -q --cov=src/api --cov=src/discord --cov-report=term-missing --cov-fail-under=80"
  expected: "All commands exit 0; coverage ≥80%."

# ======================
# FILE CREATION RULES
# ======================
file_creation:
  directory_structure:
    src_api: "FastAPI routes, models, dependencies"
    src_discord: "Discord client, message handler, rate limiter"
    src_core: "Configuration, logging, middleware"
    tests: "Mirror src structure with test_ prefix"
  naming_conventions:
    files: "snake_case.py"
    classes: "PascalCase"
    functions: "snake_case"
    constants: "UPPER_SNAKE_CASE"
    test_files: "test_module_name.py"
  boilerplate:
    python_file_header: |
      """Module description.

      This module provides...
      """
      from __future__ import annotations

# ===================
# AUTOMATION RULES
# ===================
automation_rules:
  when_to_automate:
    - "Generate code directly from OpenAPI and phase BLUEPRINT/ARCHITECTURE."
    - "Scaffold boilerplate and tests mirroring module structure."
    - "Create configuration and deployment files from templates."
  manual_intervention_points:
    - "Discord bot token/IDs (.env)."
    - "Provider secrets & deployment credentials."
    - "Manual live-session validation in Phase 9."
  validation_before_generation:
    - "Read 00_PROJECT_MISSION.yml, 00_AI_AGENT_RULES.yml."
    - "Load OpenAPI: consilium-openapi-v1.1.yaml."
    - "Read current phase BLUEPRINT and ARCHITECTURE for requirements."
    - "Ensure CI gates can be satisfied by generated code."

# ====================
# CONTEXT INJECTION
# ====================
context_injection:
  relevant_files:
    - "00_PROJECT_MISSION.yml"
    - "00_AI_AGENT_RULES.yml"
    - "00_TECHNICAL_CONSTRAINTS.yml"
    - "consilium-openapi-v1.1.yaml"
    - "phase_*_BLUEPRINT.yaml"
    - "phase_*_ARCHITECTURE.yaml"
    - "phase_*_IMPLEMENTATION.yaml"
  reference_patterns:
    phase_context: "/docs/consilium/{phase_number}_BLUEPRINT.yml"
    implementation_guide: "/docs/consilium/{phase_number}_IMPLEMENTATION.yml"
    technical_decisions: "/docs/consilium/TECHNICAL_DECISIONS.yml"
    progress_tracking: "/docs/consilium/PHASE_NOTES.txt"

# ==============
# ACCEPTANCE
# ==============
acceptance:
  ci_gate: |
    ruff . && mypy . && pytest -q --cov=src/api --cov=src/discord --cov-report=term-missing --cov-fail-under=80
  expected: "All checks succeed."
  rollback: "git checkout -- 00_COPILOT_INSTRUCTIONS.yml"