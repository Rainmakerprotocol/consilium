---
doc_type: RULES
template_version: 1.1.0
doc_title: "Phase 0 — AI Agent Rules & Coding Standards"
status: DRAFT
created_utc: "2025-10-08T10:00:00Z"
last_updated_utc: "2025-10-08T10:00:00Z"

# Conflict resolution precedence for the whole project (Phase-0 canon)
authority_order:
  - "00_AI_AGENT_RULES.yml"
  - "BLUEPRINT"
  - "ARCHITECTURE"
  - "IMPLEMENTATION"

audience: [copilot, ai_agents, human_developers]
update_protocol: "tense_management"      # Draft (future tense) → Complete (past tense)

cross_doc_relationship:
  consumes: []
  produces: [standards, validation_gates]
  updates: ["TECHNICAL_DECISIONS.yml", "PHASE_NOTES.txt"]
  references:
    - "00_COPILOT_README.md"          # operational coding guidance
    - "consilium-openapi-v1.1.yaml"   # canonical API contract

# =========================
# CODING & STYLE STANDARDS
# =========================
coding_standards:
  python:
    pep8: true
    line_length: 80
    type_hints: "mandatory"
    docstrings: "google_style"
    imports:
      order: "stdlib -> third_party -> local"
      absolute_imports: true
  async_patterns:
    fastapi_routes: "async_def_only"
    discord_client: "async_def_only"
    event_loop_blocking: "never_allowed"
  naming:
    files: "snake_case.py"
    classes: "PascalCase"
    functions: "snake_case"
    constants: "UPPER_CASE"

# ================
# FILE ORGANIZATION
# ================
file_organization:
  src_structure:
    api: "FastAPI routes, models, dependencies"
    discord: "Discord client, message handling, rate limiting"
    core: "Configuration, logging, utilities"
    main: "FastAPI application entrypoint"
  tests_structure: "tests/ mirrors src/; unit+integration"

# ==================
# QUALITY & CI GATES
# ==================
quality_gates:
  testing:
    framework: "pytest + pytest-asyncio"
    coverage_minimum: 80
    mock_external_apis: true
  validation:
    type_checking: "mypy --strict"
    linting: "ruff"
    formatting: "black + isort (configured in pyproject.toml)"
  acceptance_ci:
    commands: |
      ruff .
      mypy .
      pytest -q
    expected: "All commands exit 0."

# ==============
# AI BEHAVIOR SLO
# ==============
ai_behavior:
  constraints:
    - "No hardcoded secrets — read from environment (via Pydantic BaseSettings)."
    - "Return structured JSON error bodies per OpenAPI error schema."
    - "Structured JSON logging with request IDs; never log secrets."
    - "Require X-Consilium-Api-Key on all Strategy endpoints."
  expectations:
    - "Generate complete, working code aligned to the OpenAPI contract."
    - "Include comprehensive error handling and input validation."
    - "Follow repository structure and patterns consistently."
    - "Run CI gates locally before marking a phase COMPLETE."
  automation_rules:
    - "Read Phase‑0 docs and 00_COPILOT_README.md before code generation."
    - "Treat consilium-openapi-v1.1.yaml as source of truth for APIs."
    - "Honor idempotency and rate‑limit semantics documented in the spec."

# ====================
# OPENAPI CONFORMANCE
# ====================
openapi_contract:
  schema_path: "consilium-openapi-v1.1.yaml"
  headers:
    auth_header: "X-Consilium-Api-Key"
    idempotency_header: "X-Idempotency-Key (optional)"
  error_model_keys: ["error", "message", "details"]

# ==============
# ACCEPTANCE GATE
# ==============
acceptance:
  ci_gate: |
    ruff . && mypy . && pytest -q
  expected: "Ruff/mypy/pytest all succeed (exit code 0)."
  rollback: "git checkout -- *"
  post_validation:
    commands: |
      python - <<'PY'
      import sys, pathlib
      # Simple presence and content checks (non-exhaustive) for MVP
      schema = pathlib.Path('consilium-openapi-v1.1.yaml').read_text(encoding='utf-8')
      required_snippets = [
          '/v1/system/health',
          '/v1/system/info',
          '/v1/strategy/start-thread',
          '/v1/strategy/post',
          '/v1/strategy/fetch',
      ]
      missing = [s for s in required_snippets if s not in schema]
      sys.exit(1 if missing else 0)
      PY