---
doc_type: IMPLEMENTATION
template_version: 1.1.0
implementation_id: "phase_09_implementation"
doc_title: "Phase 9 — Deployment & MVP Validation — Implementation"
phase_id: "phase_09"
api_version: "v1.1"
status: "DRAFT"
created_utc: "2025-10-08T02:00:00Z"
last_updated_utc: "2025-10-08T02:00:00Z"
canonical_spec_path: "../../consilium-openapi-v1.1.yaml"

authority_order:
  - "00_AI_AGENT_RULES.md"
  - "BLUEPRINT"
  - "ARCHITECTURE"
  - "IMPLEMENTATION"

audience: [copilot, ai_agents, human_developers]
update_protocol: "tense_management"

cross_doc_relationship:
  consumes:
    - "./phase_09_BLUEPRINT.yaml"
    - "./phase_09_ARCHITECTURE.yaml"
    - "../00_parent/00_COPILOT_README.md"
  - "../../consilium-openapi-v1.1.yaml"
    - "./phase_08_BLUEPRINT.yaml"
    - "./phase_08_ARCHITECTURE.yaml"
    - "./phase_08_IMPLEMENTATION.yaml"
  produces:
    - "deploy/railway.json"
    - "deploy/fly/fly.toml"
    - "deploy/render/render.yaml"
    - "docs/09_DEPLOYMENT.md"
    - "docs/09_MVP_SESSION.md"
    - "docs/templates/mcp_servers.example.json"
    - "docs/templates/custom_gpt_setup.md"
  updates:
    - "../PHASE_NOTES.md"
    - "../TECHNICAL_DECISIONS.md"

---

copilot_instructions: |
  1. Purpose: Provide concrete, executable steps for Phase 9 deployment and MVP validation.
  2. Voice: Use imperative steps for Copilot-automatable tasks; clear instructions for manual Chairman tasks.
  3. Tense policy: After MVP validation complete, convert to past tense and set status COMPLETE.
  4. Outputs: Must match exactly the file paths in sections.outputs.
  5. Evidence: Provide validation commands and manual verification checklists.
  6. Scope: Generate deployment configs and documentation; Chairman executes deployment.
  7. Execution: Follow steps sequentially; validate after each major milestone.
  8. Security: Never commit secrets; use environment variables on deployment platforms.

# ===========================================================================
# CONTRACT (copied verbatim from Blueprint/Architecture)
# ===========================================================================

contract:
  purpose: >
    Deploy the relay and prove end‑to‑end functionality with a real, attributed
    multi‑AI session (Chairman + Claude via MCP + ChatGPT via Custom GPT).
  inputs:
    - "../00_parent/00_COPILOT_README.md"
    - "../consilium-9_phase_plan.yml"
  - "../../consilium-openapi-v1.1.yaml"
    - "./phase_08_BLUEPRINT.yaml"
    - "./phase_08_ARCHITECTURE.yaml"
    - "./phase_08_IMPLEMENTATION.yaml"
  outputs:
    - "deploy/railway.json"
    - "deploy/fly/fly.toml"
    - "deploy/render/render.yaml"
    - "docs/09_DEPLOYMENT.md"
    - "docs/09_MVP_SESSION.md"
    - "docs/templates/mcp_servers.example.json"
    - "docs/templates/custom_gpt_setup.md"
  acceptance:
    ci_gate: |
      python - <<'PY'
      import os, re, sys, pathlib, json
      required = [
        "deploy/railway.json",
        "deploy/fly/fly.toml",
        "deploy/render/render.yaml",
        "docs/09_DEPLOYMENT.md",
        "docs/09_MVP_SESSION.md",
        "docs/templates/mcp_servers.example.json",
        "docs/templates/custom_gpt_setup.md",
      ]
      missing = [p for p in required if not pathlib.Path(p).exists()]
      if missing:
          print("Missing:", missing); sys.exit(1)
      mcp = pathlib.Path("docs/templates/mcp_servers.example.json").read_text("utf-8")
      assert "api_key" in mcp and "base_url" in mcp, "MCP template must include api_key and base_url placeholders"
      url = os.environ.get("DEPLOY_URL")
      if url:
          import urllib.request
          with urllib.request.urlopen(url, timeout=5) as r:
              assert r.status == 200, f"Health not OK: {r.status}"
      print("Phase 9 acceptance preflight passed.")
      PY
    expected: "All templates/docs present; optional live health check passes if DEPLOY_URL provided."
  rollback: "git checkout -- deploy/ docs/09_DEPLOYMENT.md docs/09_MVP_SESSION.md docs/templates/"

# ===========================================================================
# STEP-BY-STEP IMPLEMENTATION
# ===========================================================================

implementation_steps:

  # -------------------------------------------------------------------------
  # STEP 1: Create Railway Deployment Configuration
  # -------------------------------------------------------------------------
  
  step_01_railway_config:
    order: 1
    file: "deploy/railway.json"
    purpose: "Railway deployment configuration for one-click deployment"
    automation: "copilot_generates"
    
    content: |
      {
        "$schema": "https://railway.app/railway.schema.json",
        "build": {
          "builder": "DOCKERFILE",
          "dockerfilePath": "Dockerfile"
        },
        "deploy": {
          "startCommand": "uvicorn src.main:app --host 0.0.0.0 --port $PORT",
          "restartPolicyType": "ON_FAILURE",
          "restartPolicyMaxRetries": 3,
          "healthcheckPath": "/v1/system/health",
          "healthcheckTimeout": 10
        },
        "env": {
          "DISCORD_BOT_TOKEN": {
            "description": "Discord bot token from developer portal",
            "required": true
          },
          "DISCORD_GUILD_ID": {
            "description": "Discord server (guild) ID",
            "required": true
          },
          "DISCORD_CHANNEL_ID": {
            "description": "Discord channel ID for #consilium-architecture",
            "required": true
          },
          "CONSILIUM_API_KEY": {
            "description": "API key for relay authentication (generate with: python -c 'import secrets; print(\"csk_\" + secrets.token_hex(32))')",
            "required": true
          },
          "LOG_LEVEL": {
            "description": "Logging level (DEBUG, INFO, WARNING, ERROR)",
            "default": "INFO",
            "required": false
          }
        }
      }
    
    validation: "test -f deploy/railway.json && jq . deploy/railway.json > /dev/null && echo '✓ railway.json is valid JSON'"
    
    notes:
      - "Railway automatically detects Dockerfile"
      - "PORT environment variable provided by Railway"
      - "Health check endpoint used for readiness probes"
      - "Environment variables must be set in Railway dashboard"

  # -------------------------------------------------------------------------
  # STEP 2: Create Fly.io Deployment Configuration
  # -------------------------------------------------------------------------
  
  step_02_fly_config:
    order: 2
    file: "deploy/fly/fly.toml"
    purpose: "Fly.io deployment configuration"
    automation: "copilot_generates"
    
    content: |
      # Fly.io configuration for Consilium Relay
      # Deploy with: fly deploy
      
      app = "consilium-relay"
      primary_region = "iad"  # Washington DC (change as needed)
      
      [build]
        dockerfile = "../../Dockerfile"
      
      [env]
        LOG_LEVEL = "INFO"
      
      [[services]]
        internal_port = 8000
        protocol = "tcp"
      
        [[services.ports]]
          handlers = ["http"]
          port = 80
          force_https = true
      
        [[services.ports]]
          handlers = ["tls", "http"]
          port = 443
      
        [services.concurrency]
          type = "connections"
          hard_limit = 100
          soft_limit = 80
      
        [[services.tcp_checks]]
          interval = "15s"
          timeout = "2s"
          grace_period = "5s"
      
        [[services.http_checks]]
          interval = "30s"
          timeout = "5s"
          grace_period = "10s"
          method = "GET"
          path = "/v1/system/health"
          protocol = "http"
          [services.http_checks.headers]
            # No auth required for health endpoint
      
      # Set secrets with: fly secrets set DISCORD_BOT_TOKEN=xyz DISCORD_GUILD_ID=123 ...
    
    validation: "test -f deploy/fly/fly.toml && echo '✓ fly.toml created'"
    
    notes:
      - "Secrets set via: fly secrets set KEY=value"
      - "Deploy with: fly deploy"
      - "View logs: fly logs"
      - "Scale: fly scale count 1"
      - "HTTP checks use health endpoint"

  # -------------------------------------------------------------------------
  # STEP 3: Create Render Deployment Configuration
  # -------------------------------------------------------------------------
  
  step_03_render_config:
    order: 3
    file: "deploy/render/render.yaml"
    purpose: "Render deployment configuration (Infrastructure as Code)"
    automation: "copilot_generates"
    
    content: |
      # Render Blueprint for Consilium Relay
      # Deploy via: Render Dashboard > New Blueprint Instance
      
      services:
        - type: web
          name: consilium-relay
          env: docker
          plan: starter  # Free tier available
          region: oregon  # Change as needed
          
          # Build configuration
          dockerfilePath: ./Dockerfile
          dockerContext: .
          
          # Health check
          healthCheckPath: /v1/system/health
          
          # Environment variables
          envVars:
            - key: DISCORD_BOT_TOKEN
              sync: false  # Set manually in dashboard
            
            - key: DISCORD_GUILD_ID
              sync: false
            
            - key: DISCORD_CHANNEL_ID
              sync: false
            
            - key: CONSILIUM_API_KEY
              sync: false
            
            - key: LOG_LEVEL
              value: INFO
            
            - key: PORT
              value: 8000
          
          # Auto-deploy
          autoDeploy: true
          
          # Scaling
          numInstances: 1
    
    validation: "test -f deploy/render/render.yaml && echo '✓ render.yaml created'"
    
    notes:
      - "Deploy via Render dashboard: New > Blueprint"
      - "Point to GitHub repository"
      - "Secrets must be set in Render dashboard"
      - "Free tier available for MVP testing"

  # -------------------------------------------------------------------------
  # STEP 4: Create Claude MCP Server Configuration Template
  # -------------------------------------------------------------------------
  
  step_04_mcp_template:
    order: 4
    file: "docs/templates/mcp_servers.example.json"
    purpose: "Template for Claude MCP server configuration"
    automation: "copilot_generates"
    
    content: |
      {
        "mcpServers": {
          "consilium-relay": {
            "command": "npx",
            "args": [
              "-y",
              "@modelcontextprotocol/server-fetch@0.6.2"
            ],
            "env": {
              "CONSILIUM_BASE_URL": "https://your-deployed-relay.railway.app",
              "CONSILIUM_API_KEY": "csk_your_api_key_here"
            }
          }
        }
      }
    
    validation: "jq . docs/templates/mcp_servers.example.json > /dev/null && echo '✓ MCP template is valid JSON'"
    
    usage_instructions: |
      Chairman Setup Instructions:
      
      1. Deploy relay and obtain public URL (e.g., https://consilium-relay.railway.app)
      
      2. Copy this template to: ~/.config/claude/mcp_servers.json
      
      3. Replace placeholders:
         - CONSILIUM_BASE_URL: Your deployed relay URL
         - CONSILIUM_API_KEY: Your generated API key (from .env)
      
      4. Restart Claude Desktop application
      
      5. Verify MCP connection:
         - Open Claude Desktop
         - Check for consilium-relay in available tools
         - Test with: "Create a Consilium thread titled 'Test Session'"
    
    notes:
      - "MCP uses fetch server to make HTTP requests to relay"
      - "API key authenticates Claude's requests"
      - "Base URL must be publicly accessible"
      - "No trailing slash in base URL"

  # -------------------------------------------------------------------------
  # STEP 5: Create Custom GPT Setup Documentation
  # -------------------------------------------------------------------------
  
  step_05_custom_gpt_docs:
    order: 5
    file: "docs/templates/custom_gpt_setup.md"
    purpose: "Step-by-step guide for creating ChatGPT Custom GPT"
    automation: "copilot_generates"
    
    content: |
      # ChatGPT Custom GPT Setup for Consilium Relay
      
      ## Overview
      
      This guide walks through creating a ChatGPT Custom GPT that can interact with
      the Consilium Relay to post messages in Discord threads.
      
      ---
      
      ## Prerequisites
      
      - ChatGPT Plus subscription (required for Custom GPTs)
      - Deployed Consilium Relay with public URL
      - Consilium API key
      - OpenAPI schema file (from Phase 1: `docs/01_spec/02_OPENAPI_SCHEMA.yaml`)
      
      ---
      
      ## Step 1: Create New Custom GPT
      
      1. Go to: https://chat.openai.com/
      2. Click your profile icon (bottom left)
      3. Select **"My GPTs"**
      4. Click **"Create a GPT"**
      
      ---
      
      ## Step 2: Configure GPT Basics
      
      ### Name
      ```
      Consilium Strategist
      ```
      
      ### Description
      ```
      Multi-AI strategy assistant for Consilium sessions. Posts structured
      strategic analysis to Discord threads via the Consilium Relay.
      ```
      
      ### Instructions
      ```
      You are a strategic advisor participating in multi-AI Consilium sessions.
      
      Your role:
      - Provide clear, actionable strategic analysis
      - Post messages to Discord threads using the Consilium Relay API
      - Include proper attribution (agent: ChatGPT, model: gpt-4, run_id from context)
      - Format responses in structured markdown
      - Collaborate with other AI agents (Claude) and the Chairman
      
      When posting to Consilium:
      1. Use the POST /v1/strategy/post endpoint
      2. Always include attribution metadata
      3. Structure your strategic input clearly
      4. Reference previous messages when building on others' ideas
      
      Remember: You're contributing to collaborative decision-making, not making
      decisions alone. Build on others' insights and provide complementary perspectives.
      ```
      
      ### Conversation Starters
      ```
      - Create a new Consilium strategy thread
      - Post my strategic analysis to the current thread
      - Fetch recent messages from the Consilium thread
      - Summarize the current Consilium discussion
      ```
      
      ---
      
      ## Step 3: Import OpenAPI Schema
      
      1. Click **"Create new action"**
      
      2. **Authentication:**
         - Select: **API Key**
         - Auth Type: **Custom**
         - Custom Header Name: `X-Consilium-Api-Key`
         - API Key: `[Your Consilium API key from .env]`
      
      3. **Schema:**
         - Select: **Import from URL** (if relay is deployed)
         - URL: `https://your-deployed-relay.railway.app/openapi.json`
         
         OR
         
         - Select: **Paste schema**
         - Copy contents of `docs/01_spec/02_OPENAPI_SCHEMA.yaml`
         - Paste into schema editor
      
      4. Click **"Test"** to verify connection
      
      5. Available Actions (should auto-populate):
         - `startThread` - Create new discussion thread
         - `postMessage` - Post message to thread
         - `fetchMessages` - Retrieve messages from thread
      
      ---
      
      ## Step 4: Configure Privacy & Sharing
      
      1. **Privacy:**
         - Who can access: **Only you** (for MVP testing)
         - Later: Share link with team members
      
      2. **Data Controls:**
         - Disable: "Use conversation data to improve model"
         - Enable: "Show in my GPTs list"
      
      ---
      
      ## Step 5: Save and Test
      
      1. Click **"Save"** (top right)
      
      2. **Test the GPT:**
         ```
         User: Create a new Consilium thread titled "MVP Test Session"
         ```
         
         GPT should:
         - Call startThread action
         - Return thread ID and Discord URL
      
      3. **Verify in Discord:**
         - Check #consilium-architecture channel
         - New thread should appear with title "MVP Test Session"
      
      ---
      
      ## Step 6: Post a Test Message
      
      ```
      User: Post this strategic analysis to the thread:
      
      "After reviewing the market landscape, I recommend focusing on three key areas:
      1. User experience optimization
      2. Platform integration depth
      3. Security infrastructure
      
      Each area presents unique opportunities for differentiation."
      ```
      
      GPT should:
      - Call postMessage action with attribution
      - Include agent: ChatGPT, model, run_id
      - Return confirmation
      
      **Verify in Discord:**
      - Message appears in thread
      - Attribution embed visible with ChatGPT metadata
      
      ---
      
      ## Troubleshooting
      
      ### "Authentication failed"
      - Verify API key matches CONSILIUM_API_KEY in deployed relay
      - Check header name is exactly: `X-Consilium-Api-Key`
      - Ensure no extra spaces in API key
      
      ### "Could not reach the action's server"
      - Verify relay is deployed and running
      - Check URL has no trailing slash
      - Test health endpoint: `curl https://your-relay.app/v1/system/health`
      
      ### "Action not working"
      - Re-import OpenAPI schema
      - Verify schema URL or pasted schema is correct
      - Check relay logs for errors
      
      ### "Message not appearing in Discord"
      - Verify Discord bot is in server
      - Check bot has permissions in channel
      - Review relay logs for Discord API errors
      
      ---
      
      ## Tips for Best Results
      
      1. **Structured Responses:**
         - Use markdown formatting
         - Include headers, bullet points, numbered lists
         - Keep paragraphs concise
      
      2. **Attribution:**
         - GPT automatically includes metadata
         - run_id helps track conversation flow
      
      3. **Collaboration:**
         - Reference other AI's points
         - Build on Chairman's direction
         - Ask clarifying questions when needed
      
      4. **Message Length:**
         - Relay auto-splits messages >2000 chars
         - Aim for 500-1500 chars per strategic point
         - Use multiple posts for complex analyses
      
      ---
      
      ## Next Steps
      
      After successful setup:
      1. Coordinate with Chairman for first Consilium session
      2. Ensure Claude MCP is also configured
      3. Run end-to-end MVP validation (see docs/09_MVP_SESSION.md)
      4. Document any issues or improvements
    
    validation: "test -f docs/templates/custom_gpt_setup.md && grep -q 'Step 1:' docs/templates/custom_gpt_setup.md && echo '✓ Custom GPT setup guide created'"
    
    notes:
      - "Requires ChatGPT Plus subscription"
      - "API key authentication via custom header"
      - "OpenAPI schema enables automatic action discovery"
      - "Privacy set to 'Only you' for MVP testing"

  # -------------------------------------------------------------------------
  # STEP 6: Create Deployment Guide
  # -------------------------------------------------------------------------
  
  step_06_deployment_docs:
    order: 6
    file: "docs/09_DEPLOYMENT.md"
    purpose: "Comprehensive deployment guide for all three platforms"
    automation: "copilot_generates"
    
    sections:
      - "Platform Comparison (Railway vs Fly.io vs Render)"
      - "Pre-Deployment Checklist"
      - "Railway Deployment (Step-by-Step)"
      - "Fly.io Deployment (Step-by-Step)"
      - "Render Deployment (Step-by-Step)"
      - "Post-Deployment Verification"
      - "Environment Variables Setup"
      - "Monitoring & Logs"
      - "Troubleshooting Common Issues"
      - "Scaling & Performance"
      - "Security Considerations"
      - "Cost Estimates"
      - "Next Steps (MCP & Custom GPT Setup)"
    
    validation: "test -f docs/09_DEPLOYMENT.md && wc -l docs/09_DEPLOYMENT.md | awk '{if ($1 >= 300) print \"✓ Deployment guide created (\" $1 \" lines)\"; else exit 1}'"
    
    key_content_requirements:
      - "Comparison table: Railway vs Fly.io vs Render (features, pricing, ease of use)"
      - "Pre-deployment checklist (Docker image tested, secrets ready, domain optional)"
      - "Railway: Using railway.json, CLI deployment, dashboard setup"
      - "Fly.io: Using fly.toml, flyctl CLI, secrets management"
      - "Render: Using render.yaml, Blueprint deployment, environment variables"
      - "Verification: Health check, info endpoint, API key test"
      - "Environment variables: All required vars with examples"
      - "Monitoring: Platform-specific dashboards, log access"
      - "Troubleshooting: Common deployment errors with solutions"
      - "Security: HTTPS enforcement, API key rotation, secret management"
      - "Cost: Free tier options, paid tier costs, scaling impact"

  # -------------------------------------------------------------------------
  # STEP 7: Create MVP Session Documentation Template
  # -------------------------------------------------------------------------
  
  step_07_mvp_session_template:
    order: 7
    file: "docs/09_MVP_SESSION.md"
    purpose: "Template for documenting the first successful multi-AI session"
    automation: "copilot_generates_template_chairman_completes"
    
    content: |
      # Consilium MVP Session - [DATE]
      
      ## Session Metadata
      
      - **Date:** [YYYY-MM-DD]
      - **Start Time:** [HH:MM UTC]
      - **End Time:** [HH:MM UTC]
      - **Duration:** [X minutes]
      - **Discord Thread:** [Thread URL]
      - **Session Type:** MVP Validation - First Multi-AI Consilium
      
      ---
      
      ## Participants
      
      | Participant | Access Method | Model/Version | Status |
      |-------------|---------------|---------------|--------|
      | Chairman    | Discord UI    | Human         | ✓ Active |
      | Claude      | MCP Server    | Claude Sonnet 4.5 | ✓ Active |
      | ChatGPT     | Custom GPT    | GPT-4         | ✓ Active |
      
      ---
      
      ## Session Objectives
      
      1. **Primary Goal:** Validate end-to-end multi-AI collaboration via Consilium Relay
      2. **Technical Validation:**
         - ✓ Chairman can post via Discord UI
         - ✓ Claude can post via MCP
         - ✓ ChatGPT can post via Custom GPT
         - ✓ All participants can read each other's messages
         - ✓ Attribution metadata appears correctly
      3. **Functional Validation:**
         - ✓ Thread creation works
         - ✓ Message posting works
         - ✓ Message fetching works
         - ✓ Rate limiting behaves correctly
         - ✓ Error handling graceful
      
      ---
      
      ## Discussion Topic
      
      **Topic:** [e.g., "Strategic Framework for Multi-AI Collaboration Platforms"]
      
      **Context:** [Brief description of what was discussed]
      
      ---
      
      ## Session Timeline
      
      | Time | Actor | Action | Result |
      |------|-------|--------|--------|
      | [HH:MM] | Chairman | Created thread "MVP Test Session" | ✓ Success |
      | [HH:MM] | Chairman | Posted opening message via Discord | ✓ Visible to all |
      | [HH:MM] | Claude | Posted strategic analysis via MCP | ✓ Attribution correct |
      | [HH:MM] | ChatGPT | Posted complementary perspective via Custom GPT | ✓ Attribution correct |
      | [HH:MM] | Chairman | Responded to AI inputs | ✓ Thread continuity maintained |
      | [HH:MM] | Claude | Fetched messages, synthesized discussion | ✓ Read access confirmed |
      | [HH:MM] | ChatGPT | Posted summary and next steps | ✓ Complete workflow validated |
      
      ---
      
      ## Technical Observations
      
      ### Successes ✓
      
      - **Deployment:** [Platform name] deployment successful, health checks passing
      - **Authentication:** All three participants authenticated successfully
      - **Message Flow:** Bidirectional communication working (post + read)
      - **Attribution:** All messages show correct agent/model/run_id metadata
      - **Rate Limiting:** [Describe behavior if rate limits were hit]
      - **Error Handling:** [Any errors encountered and how they were handled]
      
      ### Issues Encountered ⚠️
      
      1. **[Issue Title]**
         - **Description:** [What happened]
         - **Impact:** [How it affected the session]
         - **Resolution:** [How it was resolved]
         - **Follow-up:** [Any action items]
      
      2. **[Issue Title]**
         - **Description:** [What happened]
         - **Impact:** [How it affected the session]
         - **Resolution:** [How it was resolved]
         - **Follow-up:** [Any action items]
      
      ### Performance Metrics
      
      - **Message Latency:** [Average time from post to visibility in Discord]
      - **API Response Time:** [p50, p95, p99 if available from logs]
      - **Error Rate:** [Percentage of failed requests]
      - **Throughput:** [Messages per minute sustained]
      
      ---
      
      ## Conversation Highlights
      
      ### Key Strategic Insights
      
      1. **[Insight from Claude]**
         - [Brief summary of Claude's contribution]
      
      2. **[Insight from ChatGPT]**
         - [Brief summary of ChatGPT's contribution]
      
      3. **[Chairman's Direction]**
         - [Brief summary of Chairman's guidance]
      
      ### Collaborative Dynamics
      
      - **Synthesis:** [How well did the AIs build on each other's ideas?]
      - **Complementarity:** [Did Claude and ChatGPT provide distinct perspectives?]
      - **Convergence:** [Did the discussion reach any conclusions or consensus?]
      
      ---
      
      ## Decision Minute
      
      ### Decisions Made
      
      1. **[Decision Title]**
         - **Context:** [Why this decision was needed]
         - **Options Considered:** [Alternatives discussed]
         - **Decision:** [What was decided]
         - **Rationale:** [Why this option was chosen]
         - **Owner:** [Who is responsible]
         - **Timeline:** [When this will be implemented]
      
      2. **[Decision Title]**
         - **Context:** [Why this decision was needed]
         - **Options Considered:** [Alternatives discussed]
         - **Decision:** [What was decided]
         - **Rationale:** [Why this option was chosen]
         - **Owner:** [Who is responsible]
         - **Timeline:** [When this will be implemented]
      
      ### Action Items
      
      - [ ] **[Action]** - Owner: [Name] - Due: [Date]
      - [ ] **[Action]** - Owner: [Name] - Due: [Date]
      - [ ] **[Action]** - Owner: [Name] - Due: [Date]
      
      ---
      
      ## Lessons Learned
      
      ### What Worked Well
      
      1. **[Success]:** [Description and why it worked]
      2. **[Success]:** [Description and why it worked]
      3. **[Success]:** [Description and why it worked]
      
      ### What Could Be Improved
      
      1. **[Improvement Area]:** [Description and proposed solution]
      2. **[Improvement Area]:** [Description and proposed solution]
      3. **[Improvement Area]:** [Description and proposed solution]
      
      ### Unexpected Discoveries
      
      - **[Discovery]:** [What was learned that wasn't anticipated]
      - **[Discovery]:** [What was learned that wasn't anticipated]
      
      ---
      
      ## Platform-Specific Notes
      
      ### Deployed Relay
      
      - **Platform:** [Railway/Fly.io/Render]
      - **URL:** [https://your-relay.app]
      - **Region:** [Deployment region]
      - **Plan:** [Free/Starter/Pro]
      - **Uptime:** [Percentage during session]
      
      ### Claude MCP Configuration
      
      - **Server Version:** [@modelcontextprotocol/server-fetch@0.6.2]
      - **Base URL:** [https://your-relay.app]
      - **Authentication:** [✓ Working / ⚠️ Issues]
      
      ### ChatGPT Custom GPT
      
      - **GPT Name:** [Consilium Strategist]
      - **Actions Configured:** [3/3 working]
      - **Authentication:** [✓ Working / ⚠️ Issues]
      
      ---
      
      ## Relay Logs Analysis
      
      ### Authentication Events
      
      ```
      [Sample log showing successful authentication from all three clients]
      ```
      
      ### Message Flow
      
      ```
      [Sample logs showing message posts and fetches]
      ```
      
      ### Error Logs (if any)
      
      ```
      [Any errors encountered during session]
      ```
      
      ---
      
      ## Next Steps
      
      ### Immediate (This Week)
      
      - [ ] Address any critical issues from this session
      - [ ] Update documentation based on learnings
      - [ ] Share session recording/summary with team
      
      ### Short-term (This Month)
      
      - [ ] Schedule regular Consilium sessions
      - [ ] Refine Custom GPT instructions based on performance
      - [ ] Enhance monitoring and observability
      
      ### Long-term (This Quarter)
      
      - [ ] Expand to additional AI agents (if applicable)
      - [ ] Implement advanced features (threads, reactions, etc.)
      - [ ] Scale infrastructure based on usage patterns
      
      ---
      
      ## Appendix
      
      ### Full Message Thread
      
      [Optionally paste full conversation thread or link to Discord]
      
      ### Configuration Files Used
      
      - Railway Config: `deploy/railway.json`
      - MCP Config: `~/.config/claude/mcp_servers.json`
      - Custom GPT: [Link to GPT if shared]
      
      ### Reference Documentation
      
      - Phase 9 Architecture: `docs/phase_09_ARCHITECTURE.yaml`
      - Phase 9 Implementation: `docs/phase_09_IMPLEMENTATION.yaml`
      - Deployment Guide: `docs/09_DEPLOYMENT.md`
      - Custom GPT Setup: `docs/templates/custom_gpt_setup.md`
      
      ---
      
      ## Sign-off
      
      **Session Lead:** [Chairman Name]  
      **Date:** [YYYY-MM-DD]  
      **Status:** ✓ MVP Validated / ⚠️ Issues Remain / ✗ Failed
      
      ---
      
      **This document serves as both:**
      1. **ADR (Architecture Decision Record)** for the MVP validation approach
      2. **Decision Minute** capturing strategic decisions made during the session
    
    validation: "test -f docs/09_MVP_SESSION.md && grep -q 'Session Metadata' docs/09_MVP_SESSION.md && echo '✓ MVP session template created'"
    
    notes:
      - "Chairman fills in template during/after first MVP session"
      - "Captures both technical validation and strategic outcomes"
      - "Serves as permanent record and lessons learned document"
      - "Can be copied/modified for future Consilium sessions"

# ===========================================================================
# COMPREHENSIVE VALIDATION SUITE
# ===========================================================================

comprehensive_validation:
  description: "Full validation of Phase 9 deployment configurations and documentation"
  
  validation_01_railway_config:
    name: "Validate Railway Configuration"
    command: "test -f deploy/railway.json && jq . deploy/railway.json > /dev/null && echo '✓ railway.json valid'"
    expected: "Railway config is valid JSON with all required fields"
  
  validation_02_fly_config:
    name: "Validate Fly.io Configuration"
    command: "test -f deploy/fly/fly.toml && echo '✓ fly.toml exists'"
    expected: "Fly.io config exists with proper TOML structure"
  
  validation_03_render_config:
    name: "Validate Render Configuration"
    command: "test -f deploy/render/render.yaml && echo '✓ render.yaml exists'"
    expected: "Render config exists with proper YAML structure"
  
  validation_04_mcp_template:
    name: "Validate MCP Template"
    command: |
      jq . docs/templates/mcp_servers.example.json > /dev/null && \
      grep -q 'CONSILIUM_BASE_URL' docs/templates/mcp_servers.example.json && \
      grep -q 'CONSILIUM_API_KEY' docs/templates/mcp_servers.example.json && \
      echo '✓ MCP template valid'
    expected: "MCP template is valid JSON with placeholders"
  
  validation_05_custom_gpt_docs:
    name: "Validate Custom GPT Documentation"
    command: |
      test -f docs/templates/custom_gpt_setup.md && \
      grep -q 'Step 1:' docs/templates/custom_gpt_setup.md && \
      grep -q 'Troubleshooting' docs/templates/custom_gpt_setup.md && \
      echo '✓ Custom GPT setup guide complete'
    expected: "Custom GPT guide exists with all required sections"
  
  validation_06_deployment_docs:
    name: "Validate Deployment Documentation"
    command: |
      test -f docs/09_DEPLOYMENT.md && \
      grep -q 'Railway' docs/09_DEPLOYMENT.md && \
      grep -q 'Fly.io' docs/09_DEPLOYMENT.md && \
      grep -q 'Render' docs/09_DEPLOYMENT.md && \
      echo '✓ Deployment guide complete'
    expected: "Deployment guide covers all three platforms"
  
  validation_07_mvp_template:
    name: "Validate MVP Session Template"
    command: |
      test -f docs/09_MVP_SESSION.md && \
      grep -q 'Session Metadata' docs/09_MVP_SESSION.md && \
      grep -q 'Decision Minute' docs/09_MVP_SESSION.md && \
      echo '✓ MVP session template complete'
    expected: "MVP session template has all required sections"
  
  validation_08_live_health_check:
    name: "Live Health Check (Optional)"
    command: |
      if [ -n "$DEPLOY_URL" ]; then
        curl -f -s "$DEPLOY_URL/v1/system/health" && echo '✓ Live health check passed'
      else
        echo '⊘ DEPLOY_URL not set, skipping live check'
      fi
    expected: "If DEPLOY_URL set, health endpoint returns 200"
  
  validation_09_directory_structure:
    name: "Verify Directory Structure"
    command: |
      test -d deploy && \
      test -d deploy/fly && \
      test -d deploy/render && \
      test -d docs/templates && \
      echo '✓ Directory structure correct'
    expected: "All required directories exist"

# ===========================================================================
# CI GATE (Final Acceptance)
# ===========================================================================

ci_gate:
  commands: |
    python - <<'PY'
    import os, sys, pathlib, json
    
    # Check all required files exist
    required = [
      "deploy/railway.json",
      "deploy/fly/fly.toml",
      "deploy/render/render.yaml",
      "docs/09_DEPLOYMENT.md",
      "docs/09_MVP_SESSION.md",
      "docs/templates/mcp_servers.example.json",
      "docs/templates/custom_gpt_setup.md",
    ]
    
    missing = [p for p in required if not pathlib.Path(p).exists()]
    if missing:
        print(f"✗ Missing files: {missing}")
        sys.exit(1)
    
    # Validate MCP template has required placeholders
    mcp = pathlib.Path("docs/templates/mcp_servers.example.json").read_text("utf-8")
    if "api_key" not in mcp.lower() or "base_url" not in mcp.lower():
        print("✗ MCP template missing required placeholders")
        sys.exit(1)
    
    # Validate JSON files
    try:
        json.loads(pathlib.Path("deploy/railway.json").read_text())
        json.loads(pathlib.Path("docs/templates/mcp_servers.example.json").read_text())
    except json.JSONDecodeError as e:
        print(f"✗ Invalid JSON: {e}")
        sys.exit(1)
    
    # Optional: Live health check if DEPLOY_URL provided
    url = os.environ.get("DEPLOY_URL")
    if url:
        import urllib.request
        try:
            with urllib.request.urlopen(f"{url}/v1/system/health", timeout=5) as r:
                if r.status != 200:
                    print(f"⚠️  Health check returned {r.status}")
        except Exception as e:
            print(f"⚠️  Could not reach deployed relay: {e}")
    
    print("✓ Phase 9 acceptance preflight passed")
    print("ℹ️  Manual steps required: Deploy relay, configure MCP, create Custom GPT, run MVP session")
    PY
  
  expected: "All config files present and valid; optional health check if deployed"
  exit_code: 0

# ===========================================================================
# MANUAL CHAIRMAN TASKS
# ===========================================================================

manual_tasks:
  description: "Tasks that require Chairman intervention (cannot be automated by Copilot)"
  
  task_01_choose_platform:
    title: "Choose Deployment Platform"
    steps:
      - "Review platform comparison in docs/09_DEPLOYMENT.md"
      - "Consider: pricing, ease of use, features, geographic region"
      - "Recommended: Railway (easiest for MVP)"
      - "Decision: Select one platform for initial deployment"
  
  task_02_deploy_relay:
    title: "Deploy Relay to Chosen Platform"
    railway_steps:
      - "Create Railway account: https://railway.app"
      - "Install Railway CLI: npm install -g @railway/cli"
      - "Login: railway login"
      - "Initialize: railway init"
      - "Link repository or use railway.json"
      - "Set environment variables in Railway dashboard"
      - "Deploy: railway up"
      - "Get public URL from Railway dashboard"
    fly_steps:
      - "Install flyctl: https://fly.io/docs/hands-on/install-flyctl/"
      - "Login: fly auth login"
      - "Navigate to project: cd /path/to/consilium-relay"
      - "Launch app: fly launch (uses fly.toml)"
      - "Set secrets: fly secrets set DISCORD_BOT_TOKEN=xyz ..."
      - "Deploy: fly deploy"
      - "Get URL: fly status"
    render_steps:
      - "Create Render account: https://render.com"
      - "New > Blueprint"
      - "Connect GitHub repository"
      - "Select render.yaml"
      - "Set environment variables in dashboard"
      - "Deploy (automatic)"
      - "Get URL from Render dashboard"
  
  task_03_verify_deployment:
    title: "Verify Deployed Relay"
    steps:
      - "Health check: curl https://your-relay.app/v1/system/health"
      - "Expected: {\"status\": \"healthy\", \"timestamp\": \"...\"}"
      - "Info check: curl https://your-relay.app/v1/system/info"
      - "Expected: {\"version\": \"...\", \"api_version\": \"v1.1\"}"
      - "Test auth: curl -H 'X-Consilium-Api-Key: YOUR_KEY' https://your-relay.app/v1/strategy/start-thread"
  
  task_04_configure_claude_mcp:
    title: "Configure Claude MCP Server"
    steps:
      - "Copy template: cp docs/templates/mcp_servers.example.json ~/.config/claude/mcp_servers.json"
      - "Edit file: Replace CONSILIUM_BASE_URL with deployed URL"
      - "Replace CONSILIUM_API_KEY with your API key"
      - "Restart Claude Desktop application"
      - "Verify: Open Claude, check for consilium-relay in tools"
      - "Test: Ask Claude to 'Create a Consilium thread titled Test'"
  
  task_05_configure_custom_gpt:
    title: "Configure ChatGPT Custom GPT"
    steps:
      - "Follow guide: docs/templates/custom_gpt_setup.md"
      - "Create new Custom GPT in ChatGPT interface"
      - "Import OpenAPI schema from deployed relay or local file"
      - "Configure API key authentication (X-Consilium-Api-Key header)"
      - "Set instructions for strategic collaboration"
      - "Test: Ask GPT to 'Create a Consilium thread titled Test GPT'"
      - "Verify: Check Discord for new thread"
  
  task_06_run_mvp_session:
    title: "Run First MVP Consilium Session"
    steps:
      - "Create new thread in Discord #consilium-architecture"
      - "Post opening message as Chairman via Discord UI"
      - "Ask Claude (via MCP) to post strategic analysis"
      - "Ask ChatGPT (via Custom GPT) to post complementary perspective"
      - "Verify all three participants can see each other's messages"
      - "Check attribution metadata in Discord embeds"
      - "Document session in docs/09_MVP_SESSION.md (use template)"
      - "Review relay logs for any errors"
      - "Capture Decision Minute in session doc"
  
  task_07_validate_success:
    title: "Validate MVP Success Criteria"
    checklist:
      - "[ ] Relay deployed and responding to health checks"
      - "[ ] Claude successfully posted via MCP"
      - "[ ] ChatGPT successfully posted via Custom GPT"
      - "[ ] Chairman can read all messages in Discord"
      - "[ ] All messages show correct attribution (agent/model/run_id)"
      - "[ ] Relay logs show all three clients authenticated"
      - "[ ] No errors in relay logs during session"
      - "[ ] docs/09_MVP_SESSION.md completed with session details"
      - "[ ] Decision Minute captured (if applicable)"

# ===========================================================================
# COMPLETION STATUS
# ===========================================================================

completion_status:
  status: "DRAFT"
  
  copilot_tasks_complete_when:
    - "[ ] deploy/railway.json created"
    - "[ ] deploy/fly/fly.toml created"
    - "[ ] deploy/render/render.yaml created"
    - "[ ] docs/templates/mcp_servers.example.json created"
    - "[ ] docs/templates/custom_gpt_setup.md created"
    - "[ ] docs/09_DEPLOYMENT.md created (comprehensive)"
    - "[ ] docs/09_MVP_SESSION.md template created"
    - "[ ] All files validated via CI gate"
  
  chairman_tasks_complete_when:
    - "[ ] Platform chosen (Railway/Fly.io/Render)"
    - "[ ] Relay deployed to chosen platform"
    - "[ ] Public URL obtained and health check passing"
    - "[ ] Claude MCP configured with deployed URL"
    - "[ ] ChatGPT Custom GPT created and configured"
    - "[ ] First MVP Consilium session completed"
    - "[ ] All three participants successfully collaborated"
    - "[ ] docs/09_MVP_SESSION.md filled out with session data"
    - "[ ] Decision Minute captured (if applicable)"
  
  phase_complete_when:
    - "All Copilot tasks complete"
    - "All Chairman manual tasks complete"
    - "MVP session validated end-to-end"
    - "Documentation updated with actual session data"
    - "Status converted to COMPLETE"
    - "Tense converted to past tense"

# ===========================================================================
# ROLLBACK PROCEDURE
# ===========================================================================

rollback_procedure:
  description: "Rollback if deployment fails or MVP validation unsuccessful"
  
  revert_configs:
    command: "git checkout -- deploy/ docs/09_DEPLOYMENT.md docs/09_MVP_SESSION.md docs/templates/"
    description: "Revert all Phase 9 generated files"
  
  scale_down_deployment:
    railway: "railway down or scale to 0 in dashboard"
    fly: "fly scale count 0 or fly apps destroy consilium-relay"
    render: "Suspend service in Render dashboard"
  
  rotate_credentials:
    steps:
      - "Generate new Discord bot token"
      - "Generate new Consilium API key"
      - "Update .env locally"
      - "Update secrets on deployment platform"
      - "Invalidate old credentials"
  
  document_issues:
    steps:
      - "Capture errors in PHASE_NOTES.md"
      - "Update TECHNICAL_DECISIONS.md with learnings"
      - "Create issues for blockers"
      - "Plan remediation steps"

# ===========================================================================
# NOTES & REFERENCES
# ===========================================================================

notes:
  - "Phase 9 is partially manual - Copilot generates configs, Chairman executes deployment"
  - "Choose ONE platform initially (Railway recommended for easiest MVP)"
  - "All three platforms have free tiers suitable for MVP testing"
  - "MCP uses fetch server - no custom MCP server code needed"
  - "Custom GPT requires ChatGPT Plus subscription"
  - "First MVP session validates entire system end-to-end"
  - "docs/09_MVP_SESSION.md serves as both ADR and Decision Minute"
  - "Public URL required - localhost won't work for MCP or Custom GPT"
  - "API key must match between deployed relay and client configs"
  - "Attribution metadata critical for multi-AI collaboration tracking"

references:
  - "Railway Docs: https://docs.railway.app/"
  - "Fly.io Docs: https://fly.io/docs/"
  - "Render Docs: https://render.com/docs"
  - "Claude MCP: https://modelcontextprotocol.io/"
  - "ChatGPT Custom GPTs: https://help.openai.com/en/articles/8554397-creating-a-gpt"
  - "OpenAPI Spec: docs/01_spec/02_OPENAPI_SCHEMA.yaml"
  - "Phase 8 (Containerization): docs/phase_08_IMPLEMENTATION.yaml"

# ===========================================================================
# END OF IMPLEMENTATION
# ===========================================================================
