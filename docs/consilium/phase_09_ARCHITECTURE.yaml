---
doc_type: ARCHITECTURE
template_version: 1.1.0
architecture_id: "phase_09_architecture"
doc_title: "Phase 9 — Deployment & MVP Validation — Architecture"
phase_id: "phase_09"
api_version: "v1.1"
status: "DRAFT"
created_utc: "2025-10-08T01:32:31Z"
last_updated_utc: "2025-10-08T01:32:31Z"
canonical_spec_path: "../../consilium-openapi-v1.1.yaml"

authority_order:
  - "00_AI_AGENT_RULES.md"
  - "BLUEPRINT"
  - "ARCHITECTURE"
  - "IMPLEMENTATION"

audience: [copilot, ai_agents, human_developers]
update_protocol: "tense_management"

cross_doc_relationship:
  consumes:
    - "./phase_09_BLUEPRINT.yaml"
    - "../00_parent/00_COPILOT_README.md"
    - "../consilium-9_phase_plan.yml"
  - "../../consilium-openapi-v1.1.yaml"
    - "./phase_08_BLUEPRINT.yaml"
    - "./phase_08_ARCHITECTURE.yaml"
    - "./phase_08_IMPLEMENTATION.yaml"
  produces:
    - "./phase_09_IMPLEMENTATION.yaml"
  updates:
    - "../TECHNICAL_DECISIONS.md"
    - "../PHASE_NOTES.md"

---

copilot_instructions: |
  1. Purpose: Define HOW to realize the Phase 9 deployment and MVP validation.
  2. Conformance: No API changes; public behavior must match OpenAPI v1.1.
  3. Tense: Future while DRAFT; convert to past tense when COMPLETE.
  4. Carry forward: Copy the Contract block verbatim from the Blueprint.
  5. Validation: Provide a scriptable preflight and a clear checklist for manual steps.

sections:

  module_map: |
    deploy/
      railway.json
      fly/fly.toml
      render/render.yaml
    docs/
      09_DEPLOYMENT.md
      09_MVP_SESSION.md
      templates/
        mcp_servers.example.json
        custom_gpt_setup.md
    src/
    Dockerfile
    docker-compose.yml

  interfaces:
    rest_endpoints:
      - path: /v1/system/health
        handler: "api.routes.health()    # readiness probe"
      - path: /v1/system/info
        handler: "api.routes.info()      # build/version metadata"
      - path: /v1/strategy/start-thread
        handler: "api.routes.start_thread()"
      - path: /v1/strategy/post
        handler: "api.routes.post_message()"
      - path: /v1/strategy/fetch
        handler: "api.routes.fetch_messages()"
    internal_apis:
      - "discord.client.DiscordClient.*  # Phase 6"
      - "discord.message_handler.*       # Phase 6"
      - "api.dependencies.verify_api_key(api_key: str | None) -> None"

  non_functional_requirements:
    - "Availability: health endpoint responds within 200ms p50 in normal conditions."
    - "Security: API key via X-Consilium-Api-Key; secrets only via env; never logged."
    - "CORS: configured to allow Custom GPT host; deny '*' in production."
    - "Observability: structured JSON logs with request_id, route, status, latency."
    - "Idempotency: POST /v1/strategy/post supports X-Idempotency-Key."
    - "Rate limiting: rely on Phase 6 queue; ensure 202/Retry-After behavior documented."
    - "Change management: no schema changes allowed in Phase 9."

  contract:
    purpose: "Deploy the relay and prove end‑to‑end functionality with a real, attributed multi‑AI session (Chairman + Claude via MCP + ChatGPT via Custom GPT)."
    inputs:
      - "../00_parent/00_COPILOT_README.md"
      - "../consilium-9_phase_plan.yml"
      - "../01_spec/02_OPENAPI_SCHEMA.yaml"
      - "./phase_08_BLUEPRINT.yaml"
      - "./phase_08_ARCHITECTURE.yaml"
      - "./phase_08_IMPLEMENTATION.yaml"
    outputs:
      - "deploy/railway.json"
      - "deploy/fly/fly.toml"
      - "deploy/render/render.yaml"
      - "docs/09_DEPLOYMENT.md"
      - "docs/09_MVP_SESSION.md"
      - "docs/templates/mcp_servers.example.json"
      - "docs/templates/custom_gpt_setup.md"
    acceptance:
      ci_gate: |
        python - <<'PY'
        import os, sys, pathlib
        paths = [
          "deploy/railway.json","deploy/fly/fly.toml","deploy/render/render.yaml",
          "docs/09_DEPLOYMENT.md","docs/09_MVP_SESSION.md",
          "docs/templates/mcp_servers.example.json","docs/templates/custom_gpt_setup.md"
        ]
        missing = [p for p in paths if not pathlib.Path(p).exists()]
        if missing:
            print("Missing:", missing); sys.exit(1)
        url = os.environ.get("DEPLOY_URL")
        if url:
          import urllib.request
          with urllib.request.urlopen(url, timeout=5) as r:
            assert r.status == 200, f"Health not OK: {r.status}"
        print("Phase 9 architecture preflight passed.")
        PY
      expected: "All files present; optional live health check passes when DEPLOY_URL is set."
    rollback: "git checkout -- deploy/ docs/09_DEPLOYMENT.md docs/09_MVP_SESSION.md docs/templates/"

ci_gate:
  commands: |
    ruff check docs/ || true
    python - <<'PY'
    print("Phase 9 CI: configuration lint placeholder")
    PY
  expected: "Docs lint placeholder passes (non-blocking); proceed to manual deployment."

rollback_procedure:
  - "Revert files listed in Contract.outputs; scale down or delete service on provider."
  - "Rotate any exposed credentials; restore last known good environment."
