openapi: 3.0.3
info:
  title: Consilium Relay API
  version: "1.1.0"
  description: |
    Consilium Relay — v1 API for multi‑AI collaboration via Discord.
    This revision adds operational endpoints (health/info) and clarifies headers for idempotency and rate‑limit awareness.
    MVP scope remains:
      • Create decision threads
      • Post attributed messages (with splitting & rate-limit aware queuing on server)
      • Fetch normalized messages from a thread

    Security: API key via 'X-Consilium-Api-Key' header. Discord bot token is **never** exposed here.

servers:
  - url: https://relay.consilium.local
    description: Example local/edge URL (replace in deployment)
  - url: https://{host}
    variables:
      host:
        default: example.com

tags:
  - name: Strategy
    description: Decision-thread lifecycle
  - name: System
    description: Health and metadata

security:
  - ApiKeyAuth: []

paths:
  /v1/system/health:
    get:
      tags: [System]
      summary: Liveness/Readiness probe
      description: Returns basic liveness/readiness for deployment health checks.
      operationId: health
      responses:
        "200":
          description: OK
          headers:
            X-Consilium-Version:
              schema: { type: string }
              description: Semantic version of the running service
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/system/info:
    get:
      tags: [System]
      summary: Service metadata
      description: Returns version, build info, and basic configuration flags (non‑secret).
      operationId: info
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InfoResponse'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/strategy/start-thread:
    post:
      tags: [Strategy]
      summary: Create a new decision thread
      description: |
        Creates a Discord thread under the configured parent channel.
        If `seed_message` is provided, it is posted as the first message.
      operationId: startThread
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/StartThreadRequest'
            examples:
              basic:
                value:
                  title: "2025-10-02 · Select DB for Jarvis Phase 2"
                  seed_message: |
                    **Brief**
                    - Scope: pick a primary DB for Phase 2.
                    - Constraints: offline-first, ACID for config, queue for events.
                    - Deadline: 48h.
      responses:
        "201":
          description: Thread created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StartThreadResponse'
              examples:
                created:
                  value:
                    thread_id: "123456789012345678"
                    url: "https://discord.com/channels/111.../222.../333..."
                    created_at: "2025-10-02T14:30:00Z"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized (missing or invalid API key)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "429":
          description: Rate limited at relay or Discord
          headers:
            Retry-After:
              schema: { type: string }
              description: Delay before retrying (seconds or HTTP-date)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/strategy/post:
    post:
      tags: [Strategy]
      summary: Post an attributed message to a thread
      description: |
        Posts a message into a Discord thread. The relay handles:
          • 2000-character splitting (preserves code fences)
          • Discord rate limits (may queue and return 202 Accepted)
          • Embeds/attribution footer (agent/model/run_id)
      operationId: postMessage
      parameters:
        - in: header
          name: X-Idempotency-Key
          description: Optional idempotency key for safe retries; prevents duplicate posts
          required: false
          schema:
            type: string
            maxLength: 80
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PostMessageRequest'
            examples:
              attributed:
                value:
                  thread_id: "123456789012345678"
                  author:
                    agent: "ChatGPT"
                    model: "gpt-5-thinking"
                    run_id: "run_2025-10-02T145501Z"
                  mode: "embed"
                  content: |
                    ## Position Memo
                    **Option A:** Postgres (ACID, local-first via sqlite sync)
                    **Option B:** SQLite + LiteFS (fast, simple)
                    **Rec:** Postgres core + LiteFS edge cache.
      responses:
        "201":
          description: Message created (immediate)
          headers:
            X-RateLimit-Remaining:
              schema: { type: integer }
              description: Remaining internal relay send quota for this window
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMessageResponse'
        "202":
          description: Accepted for delivery (queued due to rate limits); client may poll fetch
          headers:
            Retry-After:
              schema: { type: string }
              description: Approximate delay until queued messages are sent
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PostMessageResponse'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Thread not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "429":
          description: Client must slow down (relay-applied)
          headers:
            Retry-After:
              schema: { type: string }
              description: Delay before retry
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /v1/strategy/fetch:
    get:
      tags: [Strategy]
      summary: Fetch recent normalized messages from a thread
      description: |
        Returns a normalized, attributed list of recent messages for a given thread.
        Use `after_ts` for incremental polling.
      operationId: fetchMessages
      parameters:
        - in: query
          name: thread_id
          required: true
          schema:
            type: string
        - in: query
          name: after_ts
          description: Return messages strictly after this ISO timestamp
          required: false
          schema:
            type: string
            format: date-time
        - in: query
          name: limit
          description: Max messages to return (default 50, max 200)
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 200
            default: 50
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FetchMessagesResponse'
              examples:
                page:
                  value:
                    thread_id: "123456789012345678"
                    messages:
                      - id: "m_001"
                        ts: "2025-10-02T14:31:00Z"
                        author:
                          agent: "Claude"
                          model: "claude-3-5"
                          run_id: "run_2025-10-02T143900Z"
                        content: "Position memo part 1/2…"
                        reply_to: null
                      - id: "m_002"
                        ts: "2025-10-02T14:31:03Z"
                        author:
                          agent: "ChatGPT"
                          model: "gpt-5-thinking"
                          run_id: "run_2025-10-02T145501Z"
                        content: "Counterpoint: LiteFS edge cache reduces…"
                        reply_to: "m_001"
                    next_after_ts: "2025-10-02T14:31:03Z"
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        "404":
          description: Thread not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        default:
          description: Unexpected error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-Consilium-Api-Key

  schemas:
    HealthResponse:
      type: object
      required: [status, uptime_s]
      properties:
        status:
          type: string
          enum: [ok, starting, degraded]
        uptime_s:
          type: number
        checks:
          type: object
          additionalProperties: { type: string }
          description: Optional component checks (e.g., discord_gateway: "connected")

    InfoResponse:
      type: object
      required: [version]
      properties:
        version:
          type: string
        git_sha:
          type: string
          nullable: true
        build_time:
          type: string
          format: date-time
          nullable: true

    StartThreadRequest:
      type: object
      required: [title]
      properties:
        title:
          type: string
          minLength: 3
          maxLength: 200
        seed_message:
          type: string
          description: Optional first post in the new thread
        room_id:
          type: string
          description: Optional logical room/guild identifier (for future multi-tenancy)
    StartThreadResponse:
      type: object
      required: [thread_id, url, created_at]
      properties:
        thread_id:
          type: string
        url:
          type: string
          format: uri
        created_at:
          type: string
          format: date-time

    PostMessageRequest:
      type: object
      required: [thread_id, author, content]
      properties:
        thread_id:
          type: string
        author:
          $ref: '#/components/schemas/Author'
        content:
          type: string
        mode:
          type: string
          description: Rendering hint; server may map to embeds/markdown
          enum: [plain, embed]
          default: plain
        reply_to:
          type: string
          nullable: true
          description: Optional message id to reply to (relay will map to Discord reply)
    PostMessageResponse:
      type: object
      required: [status]
      properties:
        status:
          type: string
          enum: [created, accepted]
        message_ids:
          type: array
          items:
            type: string
          description: IDs of created/queued messages (split-aware)
        scheduled_at:
          type: string
          format: date-time
          nullable: true
          description: When queued messages are expected to be sent (if rate-limited)

    FetchMessagesResponse:
      type: object
      required: [thread_id, messages]
      properties:
        thread_id:
          type: string
        messages:
          type: array
          items:
            $ref: '#/components/schemas/Message'
        next_after_ts:
          type: string
          format: date-time
          nullable: true
          description: Cursor to use as `after_ts` for the next page

    Message:
      type: object
      required: [id, ts, author, content]
      properties:
        id:
          type: string
        ts:
          type: string
          format: date-time
        author:
          $ref: '#/components/schemas/Author'
        content:
          type: string
        reply_to:
          type: string
          nullable: true
        embeds:
          type: array
          items:
            type: object
          nullable: true

    Author:
      type: object
      required: [agent, model, run_id]
      properties:
        agent:
          type: string
          description: Logical agent name (e.g., ChatGPT, Claude, Jarvis)
        model:
          type: string
          description: Model identifier string
        run_id:
          type: string
          description: Unique identifier for the producing run/invocation

    Error:
      type: object
      required: [error, message]
      properties:
        error:
          type: string
          description: Machine-readable error code
          example: "bad_request"
        message:
          type: string
          description: Human-readable description
        details:
          type: object
          additionalProperties: true
          nullable: true
